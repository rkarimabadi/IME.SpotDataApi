// <auto-generated />
using System;
using IME.SpotDataApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IME.SpotDataApi.Migrations
{
    [DbContext(typeof(AppDataContext))]
    [Migration("20250727153344_ExchangeRate3")]
    partial class ExchangeRate3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("IME.SpotDataApi.Models.Notification.NewsNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstPicture")
                        .HasColumnType("TEXT");

                    b.Property<string>("MainTitle")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NewsDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PriorTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortAbstract")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NewsNotifications");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Notification.SpotNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MainTitle")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("NewsDateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SpotNotifications");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Public.Broker", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Brokers");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.BuyMethod", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BuyMethods");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.Commodity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Commodities");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.ContractType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.CurrencyUnit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CurrencyUnits");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.DeliveryPlace", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeliveryPlaces");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.Group", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.MainGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MainGroups");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.MeasurementUnit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MeasurementUnits");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.Offer", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrokerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BuyMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommodityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeliveryDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DeliveryPlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InitPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InitVolume")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LotSize")
                        .HasColumnType("TEXT");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxIncOfferVol")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxInitPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxOfferPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxOrderVol")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MinAllocationVol")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinInitPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinOfferPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinOfferVol")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinOrderVol")
                        .HasColumnType("TEXT");

                    b.Property<string>("OfferDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OfferModeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OfferRing")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OfferSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OfferTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("OfferVol")
                        .HasColumnType("TEXT");

                    b.Property<int>("PackagingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PermissibleError")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PrepaymentPercent")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PriceDiscoveryMinOrderVol")
                        .HasColumnType("TEXT");

                    b.Property<int>("SecurityTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityTypeNote")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SettlementTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TickSize")
                        .HasColumnType("TEXT");

                    b.Property<string>("TradeStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TradingHallId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("WeightFactor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BrokerId");

                    b.HasIndex("CommodityId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("CurrencyUnitId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.OfferMode", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OfferModes");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.OfferType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OfferTypes");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.PackagingType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PackagingTypes");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.SecurityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SecurityTypes");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.SettlementType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SettlementTypes");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.SubGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SubGroups");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.Tender", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrokerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommodityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeliveryDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DeliveryPlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InitPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("LoadFactor")
                        .HasColumnType("TEXT");

                    b.Property<int>("LotCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LotSize")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxBuyPrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxIncreaseDemand")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaxSellPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinBuyPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinSellPrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("PackagingTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecurityTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SettlementTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TenderApplicantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TenderDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tenders");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.TradeReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuyMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CommodityId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DemandVolume")
                        .HasColumnType("TEXT");

                    b.Property<string>("DueDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FinalWeightedAveragePrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MaximumPrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeasurementUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MinimumPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OfferBasePrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("OfferId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OfferMode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OfferSymbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OfferType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OfferVolume")
                        .HasColumnType("TEXT");

                    b.Property<int>("SellerBrokerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TradeDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TradeValue")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TradeVolume")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommodityId");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("CurrencyUnitId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("MeasurementUnitId");

                    b.HasIndex("OfferId");

                    b.HasIndex("SellerBrokerId");

                    b.HasIndex("SupplierId");

                    b.ToTable("TradeReports");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.TradingHall", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PersianName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TradingHalls");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.Offer", b =>
                {
                    b.HasOne("IME.SpotDataApi.Models.Public.Broker", "Broker")
                        .WithMany()
                        .HasForeignKey("BrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("CommodityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.CurrencyUnit", "CurrencyUnit")
                        .WithMany()
                        .HasForeignKey("CurrencyUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Broker");

                    b.Navigation("Commodity");

                    b.Navigation("ContractType");

                    b.Navigation("CurrencyUnit");

                    b.Navigation("Manufacturer");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IME.SpotDataApi.Models.Spot.TradeReport", b =>
                {
                    b.HasOne("IME.SpotDataApi.Models.Spot.Commodity", "Commodity")
                        .WithMany()
                        .HasForeignKey("CommodityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.CurrencyUnit", "CurrencyUnit")
                        .WithMany()
                        .HasForeignKey("CurrencyUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.MeasurementUnit", "MeasurementUnit")
                        .WithMany()
                        .HasForeignKey("MeasurementUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.Offer", "Offer")
                        .WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Public.Broker", "SellerBroker")
                        .WithMany()
                        .HasForeignKey("SellerBrokerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IME.SpotDataApi.Models.Spot.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commodity");

                    b.Navigation("ContractType");

                    b.Navigation("CurrencyUnit");

                    b.Navigation("Manufacturer");

                    b.Navigation("MeasurementUnit");

                    b.Navigation("Offer");

                    b.Navigation("SellerBroker");

                    b.Navigation("Supplier");
                });
#pragma warning restore 612, 618
        }
    }
}
